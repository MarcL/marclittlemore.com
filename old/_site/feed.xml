<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marc Littlemore</title>
    <description>Technical articles from Marc Littlemore, a full-stack developer, and ex-videogames programmer, with over 26 years of development experience.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 06 Jul 2020 19:48:37 +0100</pubDate>
    <lastBuildDate>Mon, 06 Jul 2020 19:48:37 +0100</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Different types of software tests</title>
        <description>&lt;div class=&quot;i fw5&quot;&gt;
    &lt;p&gt;üëâüèª Want to learn more about testing your JavaScript code but don't know where to start? Get my &lt;a href=&quot;/courses/javascript-testing-beginners-course/?signup=testing-page&quot; title=&quot;FREE 7-day beginners testing course&quot;&gt;FREE 7-day testing course&lt;/a&gt; and you'll be a JavaScript testing expert in no time!&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;understanding-types-of-software-testing&quot;&gt;Understanding types of software testing&lt;/h2&gt;

&lt;p&gt;New developers often don‚Äôt know where to start with testing their code. They know that it‚Äôs a good idea but there‚Äôs an overwhelming amount of information out there. Common questions and comments I hear are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What‚Äôs a unit test?&lt;/li&gt;
  &lt;li&gt;How does it differ from an integration test?&lt;/li&gt;
  &lt;li&gt;Should I be writing end-to-end tests?&lt;/li&gt;
  &lt;li&gt;I don‚Äôt know where to start!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I‚Äôll help you to understand the differences in testing types and make you a little less scared to get started on your software testing journey.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-test&quot;&gt;What is a test?&lt;/h2&gt;

&lt;p&gt;This seems like a simple question right but a lot of people get scared when you mention software tests. There‚Äôs an easy pattern which you can follow which will simplify how you think about writing tests. It‚Äôs known as &lt;strong&gt;Arrange, Act and Assert (AAA)&lt;/strong&gt; and it‚Äôs a common way of writing tests.&lt;/p&gt;

&lt;p&gt;Firstly, you need to set up our &lt;strong&gt;pre-conditions&lt;/strong&gt; for the function under test. This is your &lt;strong&gt;Arrange&lt;/strong&gt;. Here you can initialise any objects, or data you need for your test. You can also define the output value you expect from your code after execution.&lt;/p&gt;

&lt;p&gt;Next, you &lt;strong&gt;call your code&lt;/strong&gt; with the specified inputs for your test. This is your &lt;strong&gt;Act&lt;/strong&gt;. Call your function or method with the given input as though you were calling the code in production.&lt;/p&gt;

&lt;p&gt;Lastly, you will &lt;strong&gt;verify your expectations&lt;/strong&gt; based upon either the output value, or the code paths executed. This is your &lt;strong&gt;Assert&lt;/strong&gt;. You know what you expect your code to do so you can now check that it happened. If it didn‚Äôt, then the test has failed and your code, or sometimes your test, is incorrect.&lt;/p&gt;

&lt;h2 id=&quot;unit-tests&quot;&gt;Unit tests&lt;/h2&gt;

&lt;p&gt;Most of the code that you write will need to interact with other code. It‚Äôll call another function or class method in some way. We want to split up our code into the smallest &lt;strong&gt;unit&lt;/strong&gt; that it makes sense to test. Most of my projects are written in JavaScript using Node.js so for me this is typically a function. We then test this small piece of code. Testing a small amount of code is known as a &lt;strong&gt;unit test&lt;/strong&gt;. If your test still has to allow your code to use an external service, for example an API request or database call, then it‚Äôs not a unit test.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;unit test&lt;/strong&gt; should be one of the most basic tests you have. As you want to test the code in isolation, you might have to stub or mock some external dependencies to define specific scenarios. You‚Äôll find that writing unit tests often helps to define the structure and design of your code. If it‚Äôs difficult to test, it‚Äôs often a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt; that means you could refactor your code to make it easier to test.&lt;/p&gt;

&lt;p&gt;One major factor which defines a &lt;strong&gt;unit test&lt;/strong&gt; is its speed. Due to the isolation of the code from its other dependencies, you expect these tests to be incredibly fast. You will often end up writing a lot more unit tests than you will the other test types. A typical unit test suite may have thousands of tests and you‚Äôd expect a single test to take much less than a second to run.&lt;/p&gt;

&lt;h2 id=&quot;integration-tests&quot;&gt;Integration tests&lt;/h2&gt;

&lt;p&gt;While your unit tests aim to be simple and test a single module or function, &lt;strong&gt;integration tests&lt;/strong&gt;, as their name suggest, tests how code modules fit together in your application (i.e. how they integrate). In your unit tests, the aim is to isolate the external dependencies but for your integration tests, you may allow your code to communicate with data sources like your database, or also external APIs. This isn‚Äôt a requirement and you can still mock these external dependencies if you want to.&lt;/p&gt;

&lt;p&gt;Integration tests allow you to test the full flow of your application and test how code modules interface with each other. The classic gif below shows what could happen if you have unit tests for your project and no integration tests. Both unit tests appear to pass correctly, but when the code for both is combined, it‚Äôs actually incorrect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gallery.mailchimp.com/72d3502c470827973d3e8dd63/images/3f98393a-27c9-4576-ba70-38a464d2f8ae.gif&quot; alt=&quot;Unit vs integration tests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Integration tests are generally slower than your unit tests so you‚Äôll often have fewer of them to test complete code paths. You may need configuration of external applications, like databases or HTTP requests to external APIs, if they‚Äôre not mocked out. These types of tests are great for testing higher level logic and data flow through your application.&lt;/p&gt;

&lt;p&gt;An example of an &lt;strong&gt;integration test&lt;/strong&gt; is to test the full flow of an API on a server. This may involve starting a server which runs your application code, responding to HTTP requests, authorising a client or user, validating query parameters or body data, connecting to a database or other APIs, converting data to JSON, and eventually returning the data.&lt;/p&gt;

&lt;p&gt;One thing to consider is that you can still mock external dependencies if you want to. It‚Äôs often better to have a thin wrapper around an external service which can return fake data in your integration tests. This still allows you to test your complete application flow as an &lt;strong&gt;integration test&lt;/strong&gt;, but not talk to a production API or database. A good example would be an application which uses the Twitter API to send tweets. You wouldn‚Äôt want it to send a tweet every time you ran your test suite!&lt;/p&gt;

&lt;h2 id=&quot;functional--end-to-end-tests&quot;&gt;Functional / End-to-end tests&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Function tests&lt;/strong&gt; are also know as &lt;strong&gt;end-to-end (E2E) tests&lt;/strong&gt; and they test the complete functionality of your code. They runn the complete application, usually in a browser, without mocking any external dependencies at all. These types of tests are the slowest to run so you‚Äôll generally have a lot less of these than integration or unit tests.&lt;/p&gt;

&lt;p&gt;An example of a &lt;strong&gt;functional test&lt;/strong&gt; is to verify that a user can sign into a website and that they can view the expected data once authorised. This test would use automated browser interaction to enter the username and password and click on the sign-in button. The test would verify that the title of the next page is as expected and that the user‚Äôs data is displayed. This is often done by querying the DOM to determine if elements are present. There are a lot of pre-conditions for this test, such as having a valid username and password combination, and knowning the DOM elements to verify. This means that functional tests are often more brittle and prone to breaking than unit or integration tests. Be wary of relying on user interface data for test expectations as developers or designers often change it!&lt;/p&gt;

&lt;h2 id=&quot;test-doubles&quot;&gt;Test doubles&lt;/h2&gt;

&lt;p&gt;When writing tests, there are rarely functions or classes that operate in isolation. Most code interacts with other modules in some way. If you want to isolate your function for testing you can use a &lt;strong&gt;test double&lt;/strong&gt;. This is the generic term for when you replace a production object for testing purposes with a fake. Think of it like a film where a &lt;em&gt;stunt double&lt;/em&gt; replaces the actual actor for the dangerous scenes.&lt;/p&gt;

&lt;p&gt;There are various kinds of test doubles that you can use in your tests and there will be different uses for each of them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dummy&lt;/strong&gt; - A dummy object is used in place of your production object and will match the interface of the thing it replaces. However, you don‚Äôt care what it does. Think of it as a simple placeholder which you‚Äôll need as one of your function parameters.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stub&lt;/strong&gt; - A stub is an object or function which responds with a pre-programmed response. It normally only responds to what has been programmed for the test.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spy&lt;/strong&gt; - A spy is a function which wraps an object and can record information about how the object is used. This is useful for avoiding altering the behaviour of the function, but still determining how it was interacted with.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mock&lt;/strong&gt; - Mocks are fake objects which have fake methods. They also have pre-programmed responses like stubs. However, the main difference to spies and stubs is that they also have pre-programmed expectations. If the mock is not used as expected by your code, the test will fail.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fake&lt;/strong&gt; - A fake object is similar to a stub and it will return some expected values. However, it also implements some of the functionality of the object it‚Äôs replacing. An example would be an in-memory data store which replaces the production database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;watch-the-video&quot;&gt;Watch the video&lt;/h2&gt;

&lt;p&gt;Hopefully this been a brief but helpful walkthrough of the different types of software tests you can write. I‚Äôve recorded a video which summarises what you‚Äôve learnt. I talk about the different types of tests you might write as a developer and give some information on test doubles and some of the tools that exist in the JavaScript universe which will help you to write tests. You can watch it here:&lt;/p&gt;

&lt;div class=&quot;aspect-ratio aspect-ratio--16x9 overflow-hidden mw-100&quot;&gt;
    &lt;iframe class=&quot;absolute top-0 left-0 w-100 h-100&quot; src=&quot;https://www.youtube.com/embed/pMmXJcDLUFA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;If this post was valuable to you, you can &lt;a href=&quot;https://twitter.com/marclittlemore&quot;&gt;follow my journey on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;want-to-learn-more-about-javascript-testing&quot;&gt;Want to learn more about JavaScript testing?&lt;/h2&gt;

&lt;div class=&quot;i fw5&quot;&gt;
    &lt;p&gt;üëâüèª Want to learn more about testing your JavaScript code but don't know where to start? Get my &lt;a href=&quot;/courses/javascript-testing-beginners-course/?signup=testing-page&quot; title=&quot;FREE 7-day beginners testing course&quot;&gt;FREE 7-day testing course&lt;/a&gt; and you'll be a JavaScript testing expert in no time!&lt;/p&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 28 Apr 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/different-types-of-software-tests/</link>
        <guid isPermaLink="true">http://localhost:4000/different-types-of-software-tests/</guid>
        
        
        <category>express</category>
        
        <category>javascript</category>
        
        <category>development</category>
        
        <category>unit-testing</category>
        
      </item>
    
      <item>
        <title>How to add time and date to your Messenger chatbot using the Chatfuel JSON API</title>
        <description>&lt;div class=&quot;i fw5&quot;&gt;
    &lt;p&gt;üëâüèª Want to learn more about JSON? Want to learn about the magic of JSON without being a developer? Get my &lt;a href=&quot;/bots/sign-up-bot-building-for-beginners/&quot; title=&quot;FREE JSON guide&quot;&gt;FREE JSON guide&lt;/a&gt; and you'll have JSON skills in no time!&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;watch-the-video&quot;&gt;Watch the video&lt;/h2&gt;

&lt;div class=&quot;aspect-ratio aspect-ratio--16x9 overflow-hidden mw-100&quot;&gt;
    &lt;iframe class=&quot;absolute top-0 left-0 w-100 h-100&quot; src=&quot;https://www.youtube.com/embed/UDrGpc4Dp8w&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;One of the main benefits of creating a Facebook Messenger chatbot is that you don‚Äôt have to be present to answer messages for 24 hours per day. Your chatbot should be on hand to do this while you‚Äôre fast asleep. What would be even better is if it could understand where your user lives and give them relevant content for their time of day. It could let them know whether your shop is open for business. Or it could send your users the breakfast menu rather than the dinner menu because it knows it‚Äôs 9am where they are. This functionality doesn‚Äôt exist in Chatfuel by default so let me teach you how to build an API which adds time and date functions to your chatbot.&lt;/p&gt;

&lt;h2 id=&quot;timezones--coordinated-universal-time&quot;&gt;Timezones &amp;amp; Coordinated Universal Time&lt;/h2&gt;

&lt;p&gt;When your users talk to you on Facebook Messenger, they may live anywhere around the world. This means we need to know what the time is where they live. Each user can potential live in a different &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_zone&quot;&gt;time zone&lt;/a&gt;. This means we may need to add or subtract a number of hours to the time where your server is to allow for this time difference. Although you might think that it‚Äôs always a whole number of hours, there are time zones which have half hours too. But what time is it where your API server is hosted? Well, this depends on where the data centre is that is storing and executing your code. What happens if your server is in New York, which is 5 hours behind &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenwich_Mean_Time&quot;&gt;Greenwich Mean Time&lt;/a&gt; (GMT), but your user is Germany, which is 1 hour ahead of GMT. And what happens if &lt;a href=&quot;https://en.wikipedia.org/wiki/Daylight_saving_time&quot;&gt;daylight saving time&lt;/a&gt; has happened in one of those countries? Calculating the time is hard and things can get even more complicated. That‚Äôs why we have a time standard which everyone uses. It‚Äôs called &lt;a href=&quot;https://en.wikipedia.org/wiki/Coordinated_Universal_Time&quot;&gt;Coordinated Universal Time&lt;/a&gt; or UTC. The Wikipedia page will explain why it‚Äôs not an acronym of CUT! Using UTC allows us to define all times as relative to this standard. If we store all of our times in UTC, life becomes a bit easier.&lt;/p&gt;

&lt;h2 id=&quot;calculating-a-users-time&quot;&gt;Calculating a user‚Äôs time&lt;/h2&gt;

&lt;p&gt;I‚Äôve set up an &lt;a href=&quot;https://glitch.com/edit/#!/chatfuel-demo-bot?path=routes/timeDate.js:1:0&quot;&gt;example Node.js Express server using Glitch&lt;/a&gt; which exposes an API for all of my Chatfuel demos. The API for this article is available on the following endpoint:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://chatfuel-demo-bot.glitch.me/timedate&quot;&gt;https://chatfuel-demo-bot.glitch.me/timedate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we need to do is to calculate the user‚Äôs local time using UTC. JavaScript (and Node.js) has a global object called &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; which expose a set of methods we can use to determine and manipulate the date and time. First, we need to determine the time right now. We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date.now()&lt;/code&gt; function which will return us the UTC &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;epoch time&lt;/a&gt;. This is the number of milliseconds since the start of UNIX time (at 00:00 on January 1st, 1970). We can then use this to calculate how many milliseconds difference between the user‚Äôs timezone and the time now. Using JavaScript‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; object, we can then inspect this and pull out the date and time to use in our chatbot. Let‚Äôs look at some code to do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Calculate the number of milliseconds in an hour&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// - 1000 milliseconds in a second,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// - 60 seconds in a minute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// - 60 minutes in an hour&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ONE_HOUR_IN_MILLISECONDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Pass in an offset in hours which we use to calculate the user's time&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUserDateInTimezone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetInHours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Calculate the UNIX timestamp in UTC&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;utcDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// Get the user's offset in milliseconds&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The offsetInHours could be a negative number if&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the user's timezone is behind UTC&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetInMilliseconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ONE_HOUR_IN_MILLISECONDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetInHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// Create a new Date object which adds the time offset to the time now&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utcDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offsetInMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we‚Äôve written a function to calculate a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; object, we can use the built in functions to inspect the data and return it to our user. As we‚Äôre using Express to expose an API, we‚Äôll use its routing methods to expose a HTTP GET endpoint which allows our Chatfuel chatbot to make a request using the JSON API. We will allow it to pass through a timezone as a query parameter which Facebook Messenger can provide us. We can then set some user attributes which are returned to Chatfuel and can be used in our chatbot flows. Let‚Äôs look at how we can do this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ... add the time calculation code from above here&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Allow a query parameter called &quot;timezone&quot; to be passed with the GET request&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Default it to zero if we don't send one&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timezone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Calculate the user's current Date in UTC using our code from above&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUserDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// Inspect the Date object and pull out the data we need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Build an object which we can return to Chatfuel&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dateObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Get the day&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Note that month is zero-indexed (from 0 for January to 11 for December)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// For it to make sense for an actual month number, add one to it!&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Get the full 4-digit year e.g. 2020&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Get the number of hours&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Get the number of minutes&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Get the number of seconds&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Get a standard ISO-8601 formatted string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;isoTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userDateInTimezone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toISOString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Format the data so that Chatfuel can set user attributes&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;set_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dateObject&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Return a JSON response that Chatfuel can understand&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// If we're putting our routes into separate modules for clarity&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// then we need to export the routes for use in the Express application&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last thing you need to do is to use this code in your Chatfuel chatbot. You can use the redirect blocks to check the value of ‚Äúhours‚Äù returned after calling your API. If they are greater than 18, or 6pm, you could consider it to be evening and change the user responses accordingly. In a similar way, you can check if the value is greater than 6, or 6am, and then consider it to be breakfast time. Once you‚Äôve got the user‚Äôs time and date, you can give timely responses to your user. Watch &lt;a href=&quot;https://www.youtube.com/watch?v=UDrGpc4Dp8w&quot;&gt;my video&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;p&gt;All of the code is available on my &lt;a href=&quot;https://glitch.com/~chatfuel-demo-bot&quot;&gt;Chatfuel demo Glitch project&lt;/a&gt;. Feel free to clone it and use it for your own APIs. If you spot any errors, or have any questions, then please &lt;a href=&quot;/contact&quot;&gt;send me a message&lt;/a&gt;. I love to hear from people and I‚Äôm always happy to answer your questions.&lt;/p&gt;

&lt;div class=&quot;i fw5&quot;&gt;
    &lt;p&gt;üëâüèª Want to learn more about JSON? Want to learn about the magic of JSON without being a developer? Get my &lt;a href=&quot;/bots/sign-up-bot-building-for-beginners/&quot; title=&quot;FREE JSON guide&quot;&gt;FREE JSON guide&lt;/a&gt; and you'll have JSON skills in no time!&lt;/p&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/how-to-add-time-and-date-to-your-messenger-chatbot-using-the-chatfuel-json-api/</link>
        <guid isPermaLink="true">http://localhost:4000/how-to-add-time-and-date-to-your-messenger-chatbot-using-the-chatfuel-json-api/</guid>
        
        
        <category>chatbot</category>
        
        <category>chatfuel</category>
        
        <category>json</category>
        
      </item>
    
      <item>
        <title>2019: Personal Retrospective</title>
        <description>&lt;p&gt;I started my 2020 by thumbing through Twitter as I often do, and often try to avoid doing. Between the technology and political tweets were personal 2019 reviews and retrospectives.
In software development, we use the idea of the &lt;a href=&quot;https://www.scrum.org/resources/what-is-a-sprint-retrospective&quot;&gt;agile sprint retrospective&lt;/a&gt;). A sprint is a period in which you attempt to produce new features for your software application. A sprint retrospective is a team meeting when you discuss how the last sprint went. What went well, what could have gone better, and any actions to make sprints better. These personal reviews took this idea and applied it to their lives. Here is my personal 2019 retrospective.&lt;/p&gt;

&lt;h2 id=&quot;what-went-well&quot;&gt;What went well?&lt;/h2&gt;

&lt;p&gt;One of my big goals every year is to spend quality time with &lt;a href=&quot;https://clarelittlemore.com&quot;&gt;Clare&lt;/a&gt; and our children. This year, we had a fantastic holiday to Disney World and Universal Studios in Florida. We planned to go in 2018, but issues with my feet changed our plans. While I had some toe issues before and after the holiday, we managed to walk for five miles on most days. A fantastic holiday! As the family loves theatre, we saw a surprising amount of musicals and plays throughout the year. The children also performed in four shows and I‚Äôm proud of how far they‚Äôve come with their acting and singing.&lt;/p&gt;

&lt;p&gt;Another major goal was to ensure I saw more of my friends. Once you hit your 40s, you end up with more family commitments so seeing old friends becomes harder. This year I had two major get-togethers with a great group of mates. The first one involved far too much gin! As we all head towards the wrong side of our 40s, I also managed to celebrate a couple of 50th birthdays. Music has always been a major part of my life and I saw more live music in 2019. Thanks to some tickets for my birthday, I saw &lt;a href=&quot;https://open.spotify.com/album/2D67AgXVKjql7tniG3jQKl&quot;&gt;The Midnight Hour&lt;/a&gt; in Liverpool. This ended with us meeting Ali Shaheed Muhammad from A Tribe Called Quest. A big-time legend from my hip-hop youth. It was also great to see the Loop Daddy himself, &lt;a href=&quot;https://www.marcrebillet.com/&quot;&gt;Marc Rebillet&lt;/a&gt; at Manchester‚Äôs Albert Hall in November. If you don‚Äôt know who he is then Google him. Seeing a man improvising songs in a pair of boxer shorts, a silk dressing gown, and patent leather shoes is something to behold. Part comedy. Part sex symbol. Yet he‚Äôs a brilliant musician and singer. One of the best live shows I‚Äôve seen! The final gig of the year was &lt;a href=&quot;https://en.wikipedia.org/wiki/Kruder_%26_Dorfmeister&quot;&gt;Kruder &amp;amp; Dorfmeister&lt;/a&gt;. What I thought was going to be a chilled trip-hop experience turned into a middle-aged rave. Banging tunes and a great light show made it a fantastic night.&lt;/p&gt;

&lt;p&gt;For the past three years, I‚Äôve been a Software Engineering Team Lead at the BBC. This means that I build and manage high performing teams and don‚Äôt write much code during the day any more. Most of my technology learning happens in the evenings after the kids have gone to bed (which gets much later as they get older!). I wondered how much software I wrote in 2019, so I had a look at my &lt;a href=&quot;https://github.com/MarcL&quot;&gt;GitHub commits&lt;/a&gt; for the whole year. I surprised myself with the number of new technologies I picked up, most of which I hadn‚Äôt touched before. These were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://botkit.ai/&quot;&gt;BotKit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/&quot;&gt;Google Cloud Platform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; location-based API which imports data from &lt;a href=&quot;https://airtable.com/&quot;&gt;Airtable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shopify.co.uk/&quot;&gt;Shopify&lt;/a&gt; applications and &lt;a href=&quot;https://polaris.shopify.com/&quot;&gt;Polaris&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sparkar.facebook.com/ar-studio/&quot;&gt;Spark AR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MarcL/markdown-to-mailchimp&quot;&gt;Markdown to Mailchimp&lt;/a&gt; email generation (as I dislike the Mailchimp WYSIWYG editor!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/marcl/og-image&quot;&gt;Open Graph image generation&lt;/a&gt; using serverless functions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zeit.co/docs&quot;&gt;Zeit Now 2.0&lt;/a&gt; (moving a Now v1.0 API to use their new serverless functions)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; serverless function to scrape Amazon book rankings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.typeform.com/blog/inspiration/business-ideas/&quot;&gt;‚ÄúScratching your own itch‚Äù&lt;/a&gt; is always a good way to gain more knowledge of areas you‚Äôre unfamiliar with. Since 2017 I‚Äôve become an expert in building &lt;a href=&quot;/bots&quot;&gt;Messenger chatbot experiences&lt;/a&gt; and I‚Äôve often used chatbot platforms like &lt;a href=&quot;https://chatfuel.com&quot;&gt;Chatfuel&lt;/a&gt; to build them. As I was consulting for a Messenger-based travel company, they were looking for cheaper options. This led me to build a solution using BotKit hosted using Google Cloud Platform. This was a fantastic learning experience for GCP App Engine, Cloud Firestore. It also allowed me to create a location-based API using Firebase functions and Airtable. Unfortunately, the chatbot isn‚Äôt yet live due to a lack of money from the company involved. See also ‚Äúwhat didn‚Äôt go well‚Äù!&lt;/p&gt;

&lt;p&gt;A big win for me this year was deciding to refactor my wife Clare‚Äôs author website using Gatsby. The previous incarnation used Wordpress and needed some love. Gatsby also allowed me to learn some GraphQL in the process. This led me to build some Shopify integrations for my chatbot API and understand their integration. My chatbot API needed a bit of love this year as I‚Äôd left it to stagnate using the old Zeit Now 1.0 framework. This lets you deploy an Express server and spin up compute instances as needed. Zeit used to host the whole API this way. With their new &lt;a href=&quot;https://zeit.co/blog/now-2&quot;&gt;Zeit Now 2.0&lt;/a&gt;, they pivoted to a serverless approach. The advantage of this allows the API to scale on a per endpoint basis. Yet, this requires a separate function for each API endpoint. While this was a big rewrite on my part, it made my application API much simpler. One observation I have of my 2019 project is that one learning moment leads to another. A problem or unknown solution in the first project often brought a discovery of a new technology which could help. I just wish I‚Äôd done more &lt;a href=&quot;https://www.swyx.io/writing/learn-in-public&quot;&gt;learning in public&lt;/a&gt; as &lt;a href=&quot;https://twitter.com/swyx&quot;&gt;Shawn ‚ÄúSWYX‚Äù Wang&lt;/a&gt; suggests.&lt;/p&gt;

&lt;p&gt;My work life was pretty good for most of the year. The BBC launched one of its big diversity initiatives - the &lt;a href=&quot;https://www.bbc.co.uk/blogs/internet/entries/29697bc8-9b32-4b41-8d42-33f1ed625859&quot;&gt;‚ÄúStep Into Tech‚Äù&lt;/a&gt; scheme and I became an advocate and advisor for this. It was a 14-week training programme to teach the basics of software engineering to women who were looking for a career change. I helped to mentor four of the 2018 cohort and encouraged them to shadow our team to see what we did. With the help of a senior engineer, all four women made a change to our codebase. They deployed their changes to our live applications, something they should be proud of. One of the women joined us in September, and it‚Äôs been rewarding to mentor and guide her new journey. I also ended up spending a lot of 2019 hiring and building up my engineering team. By the end of the year, I‚Äôd interviewed and hired four fantastic software engineers. Big thanks to my team for their help and support in this. A highlight of my working year was attending the amazing &lt;a href=&quot;https://theleaddeveloper.com/&quot;&gt;Lead Developer conference&lt;/a&gt; in London in June 2019. As a software engineering team lead, it‚Äôs much harder to see the impact you make on a team as you no longer write code. This brought together some excellent speakers from the engineering teams across the world. It was fantastic to hear presentations from likeminded team leads, and to hear the challenges of building high functioning teams.&lt;/p&gt;

&lt;p&gt;One of my biggest wins of the year was to use a habit tracker, a Google Sheet, to see where I was spending my time. I wanted to practice &lt;a href=&quot;https://en.wikipedia.org/wiki/Quantified_self&quot;&gt;quantified self&lt;/a&gt; and so recorded statistics about my life for the whole of 2019. I tracked the parts of my life I thought I should improve, such as when I went to bed, when I exercised (or didn‚Äôt!) and so on. One of these was reading. I‚Äôve often found it tricky to stick to a regular reading schedule but by recording when I read, I tricked myself into reading more. I finished ten books in 2019 so that‚Äôs a personal win for me.&lt;/p&gt;

&lt;h2 id=&quot;what-could-have-gone-better&quot;&gt;What could have gone better?&lt;/h2&gt;

&lt;p&gt;After my &lt;a href=&quot;(/how-i-almost-died)&quot;&gt;near-death experience&lt;/a&gt; in 2014, I knew I should attempt to get more exercise. I‚Äôve encountered a few health issues following my hospitalisation so I spent 2019 attempting to get fit. This began well but as has happened in the past, I wrestled with more issues with my toe. The amputation of my right great toe creates more pressure on the next toe. This means a greater potential for ulcers (holes) in it. It‚Äôs a constant balance between more cardio exercise whilst avoiding further complications. My habit tracker showed that I spent 26% of my year exercising. I should have spent more time getting my bike in order and cycling but I didn‚Äôt prioritise this. This would avoid any major impact on my feet versus running, which my podiatrist advises me to avoid.&lt;/p&gt;

&lt;p&gt;Since 2017 I‚Äôve become an expert at &lt;a href=&quot;/bots&quot;&gt;building Messenger chatbots&lt;/a&gt;. I acted as a consultant for a London-based travel company based in London at the end of 2018 and the beginning of 2019. This was a side-project which I hoped would lead to more consultancy work. I leveraged the BotKit framework to build a cost-effective bot without the cost of an external platform such as Chatfuel. While this was a great learning experience, I spent a lot of time working on the project to finish the required features. As the company is a startup, it had little spare cash and failed to pay my final invoices. Given the effort I put into the project, this caused frustrations on my part. I had a similar experience in 2018 where I built a &lt;a href=&quot;https://dialogflow.com/&quot;&gt;Dialogflow&lt;/a&gt; and &lt;a href=&quot;https://www.twilio.com/&quot;&gt;Twilio&lt;/a&gt; chatbot for an American entrepreneur and no payment materialised. It‚Äôs made me realise that I need to become better at negotiating full payment and contracts up-front.&lt;/p&gt;

&lt;p&gt;As well as developing a better reading habit, I wanted to build a habit of regular writing. I missed the mark with this with only 11% of my days spent writing. My one success here was writing and releasing a 30-page guide to JSON for chatbots (which you can get &lt;a href=&quot;/bots&quot;&gt;here&lt;/a&gt;). I failed to find my writing voice so this is a big goal for me in 2020.&lt;/p&gt;

&lt;p&gt;Since late 2017 I‚Äôve had plans to build an online course. I love helping people and want to share my knowledge with us to generate a side income from it. My JSON guide was my initial ‚Äúlead magnet‚Äù to encourage people onto my mailing list but I failed to capitalise on this. I spent too much time thinking about what I should do rather than creating. I should have been releasing early and often and learning what people want. Paralysis by analysis happens far too often so I‚Äôd like to avoid this in 2020.&lt;/p&gt;

&lt;h2 id=&quot;plans-for-2020&quot;&gt;Plans for 2020&lt;/h2&gt;

&lt;p&gt;My main goal for 2020 is being addressed by this blog post as I plan to find my writing ‚Äúvoice‚Äù. Since school, I‚Äôve often told myself ‚ÄúI‚Äôm not very good at English‚Äù and ‚ÄúI‚Äôm much better at maths‚Äù. I often write in my day job, be it technical papers or tickets, or emails to senior stakeholders. But I rarely write for a wider audience. The plan for 2020 is to blog more often and do a lot more &lt;a href=&quot;https://www.swyx.io/writing/learn-in-public&quot;&gt;learning in public&lt;/a&gt;. I‚Äôm will endeavour to write about the technologies that I‚Äôm learning, how I‚Äôm building my online course, and more.&lt;/p&gt;

&lt;p&gt;As 2019 wasn‚Äôt a great year for fitness, I need to get much fitter this year. As I enjoy cycling, I‚Äôm going to get outside more on my mountain bike, both alone and with the family. My wife and I are also trying to get the family into a regular habit of getting outside to walk more. We live near some beautiful countryside and it seems a shame not to see more of it. This will combine cardio exercise with fresh air which always helps to clear your head.&lt;/p&gt;

&lt;p&gt;Since stomach surgery in 2014, I‚Äôve had a more difficult relationship with food. I love cooking and have always enjoyed eating great food but I often struggle to eat well. I have to consume much smaller portion sizes and I‚Äôm often sick after eating. I now find meat more difficult to digest so I plan to lean towards a more vegetarian diet. This has obvious health benefits for me and also has the potential to help with &lt;a href=&quot;https://www.bbc.co.uk/news/science-environment-49238749&quot;&gt;climate change&lt;/a&gt;. I‚Äôd love to head towards a mostly plant-based diet but I like cheese too much. I‚Äôve started the year as more of a &lt;a href=&quot;https://www.bbcgoodfood.com/howto/guide/what-flexitarian-diet&quot;&gt;flexitarian&lt;/a&gt;, with a much-reduced meat diet. I‚Äôll see where this year takes me but I may well be completely vegetarian by the end of the year.&lt;/p&gt;

&lt;p&gt;This year I want to get some traction on my side projects and aim to make a reasonable side income through it. I‚Äôll be publishing &lt;a href=&quot;https://www.youtube.com/c/marclittlemore&quot;&gt;more videos&lt;/a&gt; on YouTube and this will be part of a marketing push to drive more traffic to my website. I am committing to publishing a short course in the first quarter of 2020. I‚Äôll be doing some research in the next couple of weeks and aim to release an outline before the end of January 2020.&lt;/p&gt;

&lt;p&gt;As well as spending more time with the family, I want to get back to some of my old hobbies. I spend most of my evenings reading about technology or writing new software. This hasn‚Äôt allowed me enough time for non-tech related hobbies. I increased my rate of reading in 2019 and the goal for 2020 is to read twenty books. I also want to resurrect my old love of making music. I‚Äôve not made any new tracks since the early 2010s so it‚Äôs time to dust off the audio interface and MIDI keyboard and get back to making electronic music. 2020 could be the year I dust off the decks and get &lt;a href=&quot;http://www.djcruze.co.uk&quot;&gt;DJ Cruze&lt;/a&gt; rocking the house again. Watch this space!&lt;/p&gt;

&lt;p&gt;I‚Äôve set myself some audacious goals for 2020 but there‚Äôs little point in not trying to better myself. I look forward to reviewing them all in 2021 to see how far I‚Äôve travelled. Will I have achieved most of them? Let‚Äôs see next year.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is inspired &lt;a href=&quot;https://www.knutmelvaer.no/blog/2020/01/2019-a-personal-retrospective/&quot;&gt;Knut Melv√¶r&lt;/a&gt;, &lt;a href=&quot;https://lengstorf.com/2019-personal-retrospective/&quot;&gt;Jason Lengstorf&lt;/a&gt;, &lt;a href=&quot;https://justinjackson.ca/2019-review&quot;&gt;Justin Jackson&lt;/a&gt;, &lt;a href=&quot;https://blog.stephsmith.io/another-year-under-the-sun/&quot;&gt;Steph Smith&lt;/a&gt;, and &lt;a href=&quot;https://www.madisonkanna.com/2019-in-review/&quot;&gt;Madison Kanna&lt;/a&gt;, while listening to the wonderful French band &lt;a href=&quot;http://wearephoenix.com/&quot;&gt;Phoenix&lt;/a&gt; and the album &lt;a href=&quot;https://open.spotify.com/album/2TVvPbLNPTCZS8lPHs1rZW?si=LV0DLrnpRKmnulbSsLIHcw&quot;&gt;Wolfgang Amadeus Phoenix&lt;/a&gt;. A classic from 2009.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2019-personal-retrospective/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-personal-retrospective/</guid>
        
        
        <category>review</category>
        
      </item>
    
      <item>
        <title>How to validate an email adress using the Chatfuel JSON API</title>
        <description>&lt;p&gt;Facebook Messenger chatbots are a great addition to your marketing toolbox but they have one big problem.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Facebook controls the platform and can change its rules when it wants to.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Their &lt;a href=&quot;https://developers.facebook.com/docs/messenger-platform/policy/policy-overview/#current_policy&quot;&gt;recent changes to their broadcast and subscription messaging rules&lt;/a&gt; means it‚Äôs more difficult to contact users after 24 hours if they‚Äôre not engaging with your bot. While stopping people from abusing Messenger messages is the right thing, how to you keep your user‚Äôs engaged?&lt;/p&gt;

&lt;p&gt;I always recommend that you should consider Facebook Messenger as one of your marketing channels but you always need a multi-channel marketing approach. That‚Äôs why it‚Äôs useful to ask your chatbot users for their email address and add them to an email list in your Email Service Provider (ESP) like &lt;a href=&quot;https://mailchimp.com/&quot;&gt;Mailchimp&lt;/a&gt; or &lt;a href=&quot;https://convertkit.com/&quot;&gt;ConvertKit&lt;/a&gt;. Messenger allows you to ask for an email address using one of its quick replies but if the email isn‚Äôt available, or the user chooses to type it in, how do we make sure we‚Äôve got valid data?&lt;/p&gt;

&lt;h2 id=&quot;validating-an-email-using-chatfuel&quot;&gt;Validating an email using Chatfuel&lt;/h2&gt;

&lt;p&gt;Let‚Äôs take a look at how we can validate a given user email using Chatfuel as our chatbot platform. Chatfuel allows you to ask for a user‚Äôs email using it‚Äôs ‚ÄúSave User Email‚Äù element. Adding this to your chatbot flow allows you to send a quick reply to your and ask for an email address which is then stored in a Chatfuel user attribute. If you pass this to your server side API using the JSON API plugin, you can‚Äôt validate it on the server to determine if it‚Äôs valid.&lt;/p&gt;

&lt;h2 id=&quot;watch-the-video&quot;&gt;Watch The Video&lt;/h2&gt;

&lt;p&gt;Take a look at how I build this email validation using &lt;a href=&quot;https://glitch.com&quot;&gt;Glitch&lt;/a&gt; and a Node.js Express web server together with Chatfuel‚Äôs JSON API.&lt;/p&gt;

&lt;div class=&quot;aspect-ratio aspect-ratio--16x9 overflow-hidden mw-100&quot;&gt;
    &lt;iframe class=&quot;absolute top-0 left-0 w-100 h-100&quot; src=&quot;https://www.youtube.com/embed/r4h4DD1DNE8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;how-to-validate-an-email-address&quot;&gt;How to validate an email address?&lt;/h3&gt;

&lt;h4 id=&quot;using-a-regular-expression&quot;&gt;Using a regular expression&lt;/h4&gt;

&lt;p&gt;Validating email addresses correctly can be tricky. One way is to use something called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;regular expression&lt;/a&gt;. This is a sequence of characters that define a search pattern that you attempt to match against. You‚Äôll find hundreds of different email regular expressions on the internet which give you various queries to validate against. However, they often come with caveats that they make a trade-off between speed and accuracy. You can use one of these to match the given email address with a specific pattern but you may incorrectly accept or reject some email addresses. The official regular expression which matches all email addresses is &lt;a href=&quot;http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html&quot;&gt;ridiculously big&lt;/a&gt;. I can‚Äôt imagine attempting to debug this if it doesn‚Äôt work as expected in your programming language. While a regular expression will confirm if your email matches a specific pattern, we can‚Äôt confirm whether we can send an email to it.&lt;/p&gt;

&lt;h4 id=&quot;send-the-user-an-email&quot;&gt;Send the user an email&lt;/h4&gt;

&lt;p&gt;A nicer way is to determine if you can &lt;a href=&quot;https://medium.com/hackernoon/the-100-correct-way-to-validate-email-addresses-7c4818f24643&quot;&gt;send an email to the given email address&lt;/a&gt;. This works really well for verifying an email address when signing up for an online service, but it‚Äôs not that easy when you need to validate an email in a chatbot flow. Flows in Messenger or WhatsApp can‚Äôt wait for your user to check their email and click on a link.&lt;/p&gt;

&lt;h4 id=&quot;checking-the-mx-record&quot;&gt;Checking the MX record&lt;/h4&gt;

&lt;p&gt;However, we can do something better by checking that the email has a valid domain to send email to. If we find a domain name in the given email address, we can check the DNS (Domain Name Server) records for the domain. These records can tell us the IP address on which the domain is hosted. They can also be used to see if email can be sent to the domain. For this we can check if the domain has an MX (Mail eXchange) record. If it does, we can send email to it.&lt;/p&gt;

&lt;h4 id=&quot;writing-an-api-service-to-check-for-a-valid-email-domain&quot;&gt;Writing an API service to check for a valid email domain&lt;/h4&gt;

&lt;p&gt;Checking for an MX record does take some time so first we can verify that the email address has the format of an email address. For this you can check for the presence of an @ symbol. If it exists then the user has at least attempted to give us something which is similar to an email address! If you retrieve the rest of the string after the @ symbol, this represents the domain name. In my video below, I use Node.js and the standard &lt;a href=&quot;https://nodejs.org/docs/latest/api/dns.html&quot;&gt;dns library&lt;/a&gt; to determine if an MX record exists for that domain. If it does, then you should be able to send email to that address and we can consider it valid.&lt;/p&gt;

&lt;p&gt;Here‚Äôs some example code to retrieve an email address and validate it.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dns'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The dns library will return:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ENOTFOUND - if no records exist at all for the domain&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ENODATA - if no MX record was found for the domain,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or if the user data was invalid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasMxRecordError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ENOTFOUND'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ENODATA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A promise-based method to determine if the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// MX record exists for the given email&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkValidMxRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Determine if email is in the correct format&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isEmail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Invalid email address does not contain @ symbol'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Split the email address and destructure to find the domain&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO: You could also validate the username if you wanted to&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Read the DNS records and see if an MX record exists for the domain&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolveMx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Check if any errors occurred&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasMxRecordError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Email has invalid MX record'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
            &lt;span class=&quot;c1&quot;&gt;// You may not need the records but we can return them in case&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make my APIs more robust, I always return user attributes back to Chatfuel to inform it whether an API has succeeded or not. This allows us to avoid hard coding any messages in the API and gives back control to Chatfuel, or whichever chatbot platform you use, and use that to display the correct user messaging. It‚Äôs a good way to inform the user that they‚Äôve potentially typed in their email incorrectly. You can also use this validation check to gate your content to only allow access to people who supply their email address.&lt;/p&gt;

&lt;p&gt;Of course, this method has a flaw in that we can‚Äôt confirm that the username is valid without sending an email to it. We‚Äôll find this out when we send an email to them from our mailing list but at least we got halfway there.&lt;/p&gt;

&lt;p&gt;I hope you found this useful. All of the code is available on my &lt;a href=&quot;https://glitch.com/~chatfuel-demo-bot&quot;&gt;Chatfuel demo Glitch project&lt;/a&gt;. Feel free to clone it and use it for your own APIs. If you spot any errors, or have any questions, then please &lt;a href=&quot;/contact&quot;&gt;send me a message&lt;/a&gt;. I love to hear from people and I‚Äôm always happy to answer your questions.&lt;/p&gt;

&lt;div class=&quot;i fw5&quot;&gt;
    &lt;p&gt;üëâüèª Want to learn more about JSON? Want to learn about the magic of JSON without being a developer? Get my &lt;a href=&quot;/bots/sign-up-bot-building-for-beginners/&quot; title=&quot;FREE JSON guide&quot;&gt;FREE JSON guide&lt;/a&gt; and you'll have JSON skills in no time!&lt;/p&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/how-to-validate-an-email-address-using-the-chatfuel-json-api/</link>
        <guid isPermaLink="true">http://localhost:4000/how-to-validate-an-email-address-using-the-chatfuel-json-api/</guid>
        
        
        <category>chatbot</category>
        
        <category>chatfuel</category>
        
        <category>json</category>
        
      </item>
    
      <item>
        <title>The Illest Man In The Hospital</title>
        <description>&lt;p&gt;Back in 2014 I almost died when I contracted an infection that quickly caused sepsis. &lt;a href=&quot;/how-i-almost-died&quot;&gt;I almost died&lt;/a&gt;. Through the hard work of the doctors in the intensive care unit (ICU) of Warrington Hospital, they managed to keep me alive and ultimately saved my life. I feel very lucky to be alive and I‚Äôve often wanted to share my experiences in ICU with others.&lt;/p&gt;

&lt;p&gt;I was invited to talk at Cheshire and Merseyside Critical Care Network (CMCCN) ‚ÄúDelirium Implementation of Best Practice Study Day‚Äù as a patient advocate to tell me story. Hopefully this will help both doctor‚Äôs and patients to understand the challenges that ICU patients face both before and after ICU care.&lt;/p&gt;

&lt;p&gt;If you have any questions then get in &lt;a href=&quot;/contact&quot;&gt;contact&lt;/a&gt; or tweet at me on &lt;a href=&quot;https://twitter.com/marclittlemore&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;c4e8cd0138fc40c1b22dc9ec625799a9&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Mon, 25 Jun 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/talks/the-illest-man-in-the-hospital/</link>
        <guid isPermaLink="true">http://localhost:4000/talks/the-illest-man-in-the-hospital/</guid>
        
        
        <category>talks</category>
        
      </item>
    
      <item>
        <title>From Space Invaders to Strictly</title>
        <description>&lt;p&gt;This is a talk I gave to the &lt;a href=&quot;https://techreturners.com/&quot;&gt;Tech Returners&lt;/a&gt; in Manchester in May 2018. I was asked to come in and share how I first got into technology and software development, and how my career progressed. I share how my love of Space Invaders and an Atari VCS got me into computer programming, and how I went from videogames to building the authentication system at the BBC. I also share some tips for getting into the software development industry and answer some common questions I get from new developers.&lt;/p&gt;

&lt;p&gt;If you have any questions then get in &lt;a href=&quot;/contact&quot;&gt;contact&lt;/a&gt; or tweet at me on &lt;a href=&quot;https://twitter.com/marclittlemore&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;3903e9d8a5484132a15715b96f1cbb64&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Wed, 09 May 2018 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/talks/from-space-invaders-to-strictly/</link>
        <guid isPermaLink="true">http://localhost:4000/talks/from-space-invaders-to-strictly/</guid>
        
        
        <category>talks</category>
        
      </item>
    
      <item>
        <title>BBC Account : Engineering Excellence at Strictly Scale</title>
        <description>&lt;p&gt;Here‚Äôs a talk that I gave at BBC North‚Äôs ‚ÄúWomen In Tech‚Äù event in February 2018, which discusses the theme of building a culture of engineering excellence within a development team. I wanted to share some learnings around our engineering team who strive for quality code, whilst managing deployments of applications which are instantly seen by millions of people. It‚Äôs not about writing as much code as quickly as we can to enable fast feature delivery. It‚Äôs about building the best processes to encourages the writing of software that scales and is easy to maintain. Learn how we attempt to build an environment of consistency, trust in the team, and knowledge sharing between our developers, whilst delivering quality software at the crazy scale which allows you to vote on Strictly Come Dancing on Saturday night. Unfortunately the gifs don‚Äôt work on Speaker Deck but enjoy the static images and bad memes anyway. If you have any questions then get in &lt;a href=&quot;/contact&quot;&gt;contact&lt;/a&gt; or tweet at me on &lt;a href=&quot;https://twitter.com/marclittlemore&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; I gave a longer version of this talk at The IT Crewe meetup in September 2018 and have embedded that version below.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;bf572268290c4c969d827d97f50ff10e&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/talks/bbc-account-engineering-excellence-at-strictly-scale/</link>
        <guid isPermaLink="true">http://localhost:4000/talks/bbc-account-engineering-excellence-at-strictly-scale/</guid>
        
        
        <category>talks</category>
        
      </item>
    
      <item>
        <title>7 Tips For Writing Great Unit Tests</title>
        <description>&lt;p&gt;How do you learn to write great unit tests? Why are some unit tests good and some bad? I‚Äôm a big evangelist of test driven development (TDD) and of software testing in general. It‚Äôs amazing how much confidence a suite of hundreds or thousands of tests give you when you‚Äôre deploying your code. I‚Äôve previously written about &lt;a href=&quot;/how-to-write-high-quality-unit-tests/&quot;&gt;writing great unit tests&lt;/a&gt; but I thought I‚Äôd turn that information into some slides and record a video. Although I am mainly coding using JavaScript and Node.js, here I talk about what you should think about to create useful unit tests in any programming language. Hopefully it‚Äôll give you a few tips to start writing your own unit tests for your projects.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;b4c4ab961cf1476d8afff3f68a2e5189&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;div class=&quot;aspect-ratio aspect-ratio--16x9 overflow-hidden mw-100&quot;&gt;
    &lt;iframe class=&quot;absolute top-0 left-0 w-100 h-100&quot; src=&quot;https://www.youtube.com/embed/UgsJwcG979U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 04 Jul 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/talks/7-tips-for-writing-great-unit-tests/</link>
        <guid isPermaLink="true">http://localhost:4000/talks/7-tips-for-writing-great-unit-tests/</guid>
        
        
        <category>talks</category>
        
      </item>
    
      <item>
        <title>Securing Your BBC Identity</title>
        <description>&lt;p&gt;Application security is often an afterthought for developers, as we concentrate on the next shiny new feature for our projects. In this talk, we‚Äôll highlight the importance of application security and explore some simple and practical ways that we as developers can defend our services from intrusion.&lt;/p&gt;

&lt;p&gt;We‚Äôll look at how my team at the BBC approached security concerns when creating the new BBC ID applications, and dive into some code examples to explore the best practices for Node.js server security.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;div class=&quot;aspect-ratio aspect-ratio--16x9 overflow-hidden mw-100&quot;&gt;
    &lt;iframe class=&quot;absolute top-0 left-0 w-100 h-100 mb-0 b--solid b--light-silver ba&quot; src=&quot;//www.slideshare.net/slideshow/embed_code/key/oeY1L0QVooxru3&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Location: &lt;a href=&quot;https://www.meetup.com/JavaScript-North-West/events/239152184/&quot;&gt;JavaScript North West Meetup&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/talks/securing-your-bbc-identity/</link>
        <guid isPermaLink="true">http://localhost:4000/talks/securing-your-bbc-identity/</guid>
        
        
        <category>talks</category>
        
      </item>
    
      <item>
        <title>Lessons Learned From Running A Code Club</title>
        <description>&lt;p&gt;Here in the UK we have an organisation called &lt;a href=&quot;https://www.codeclub.org.uk/&quot;&gt;Code Club&lt;/a&gt; which aims to help all children learn to code. It‚Äôs a network of volunteers and educators who run free coding clubs for 9 to 11 year olds. I have two children, aged 7 and 9, and I want to encourage them to learn more about computing and technology and not just watch gaming videos on YouTube. When my eldest son moved from his infant school to his junior school a couple of years ago, the teachers told me how ill prepared they were for the move from Information Communication Technology (ICT) to computing. This was due to ICT being more about how to use a computer rather than how to write computer code. Having over 20 years of professional programming experience, I thought that this would be a good time to get involved to help my son‚Äôs school. Unfortunately, due to &lt;a href=&quot;/how-i-almost-died/&quot;&gt;almost dying&lt;/a&gt;, it took a bit longer to help out thank expected but I finally started running a Code Club this year. It‚Äôs harder work than I imagined but it‚Äôs a fantastically rewarding experience. Here are a some lessons I have learned along the way which could help others.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned-in-running-my-code-club&quot;&gt;Lessons Learned In Running My Code Club&lt;/h2&gt;

&lt;p&gt;My original plan for my Code Club was to teach one group of children for around 10 weeks. I decided to only run the club for the Y5 and Y6 pupils, ages 9 to 11, and my plan was to start with the basics and continue to build on the projects each week. When the school announced the Code Club it was over-subscribed with around 30 children enrollong. Instead, I ran the club for two 5 week periods with 15 students in each class.&lt;/p&gt;

&lt;h3 id=&quot;teaching-is-hard&quot;&gt;Teaching is hard&lt;/h3&gt;

&lt;p&gt;My wife is an English teacher of over 17 years. She laughed at me when I returned home after the first lesson and exclaimed ‚Äúthat was hard work‚Äù. Any teachers reading this will also be laughing at my na√Øvety. I blindly assumed that all children would listen and implement the coding lessons I‚Äôd prepared. They did. Sometimes.&lt;/p&gt;

&lt;p&gt;Some children will listen. Others, not so much. There‚Äôs noise, there are questions, somebody needs to go to the toilet, everyone needs to go to the toilet, somebody is showing the whole class their project and so on. It‚Äôs great fun but it can get chaotic. There‚Äôs a great article about &lt;a href=&quot;https://blog.codeclub.org.uk/2016/07/13/embracing-chaos-in-your-code-club/&quot;&gt;embracing the chaos&lt;/a&gt; on the Code Club website that everyone should read. I quickly realised that allowing them to do their own thing was part of them building their confidence in computer programming.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Embrace the chaos. It may be hard initally if you‚Äôre not an educator and aren‚Äôt used to children in a classroom environment. It gets easier and much more fun pretty quickly though.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;class-size&quot;&gt;Class size&lt;/h3&gt;

&lt;p&gt;I had a class size of 15 children in each group. As a non-teacher, this felt like a good class size to be able to control. For the first two weeks of Code Club I was alone in teaching until another parent helper had received his DBS check. It is harder than I imagined to be able to teach a class and answer all of their questions with one teacher and 15 children. Once an additional pair of hands was on-board, it made teaching much easier and big thanks to Dan for helping every week.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Make teaching easier by having a ratio of at least 1 adult helper to 6 or 7 children.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-variety-of-programming-experience&quot;&gt;A variety of programming experience&lt;/h3&gt;

&lt;p&gt;I chose to use &lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt; for all of my projects. It‚Äôs a good choice for drag-and-drop programming and introduces the children to the basics of computing in a simple environment. It avoids complicated syntax errors when using a language such as Python or JavaScript. Most of the children had used Scratch at school but there was a range of abilities. Some questioned the basics while others raced ahead adding new features to their projects. My Code Club is in the school library so I always introduce the lessons with a set of slides on the TV. I introduce the lesson and talk through the basics but then have a set of enhancements that the children could work towards if they have the time. This helped to set the goal for the slower students while challenging the quicker ones. I also shared my version of the game as a challenge to make their‚Äôs better than mine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Consider extra features that the children could add to the project. If you‚Äôre not an experienced programmer why not write a list of ideas that the children could add to your resources, even if you‚Äôre not sure how to do them.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;preparation-of-lessons-is-key&quot;&gt;Preparation of lessons is key&lt;/h3&gt;

&lt;p&gt;It‚Äôs perhaps an obvious point to make, especially if you‚Äôre a teacher, but you should always run through the Code Club resources a couple of nights before. This helped me to understand the Code Club approach to the problem which often differed to my own. As I mentioned above, I always create a ‚Äústretch goal‚Äù for the children to try and achieve. This could involve improving the graphics, adding start and end game screens, adding sound and any other fun ideas I could think of. This ended up as a great challenge for me too. Scratch is restrictive when you‚Äôre used to writing complex applications or games but working out a Scratch-based way of thinking was great fun.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Run through the lesson the night before and you‚Äôll encounter any issues that the children will have before they do.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;using-sound&quot;&gt;Using sound&lt;/h3&gt;

&lt;p&gt;I ran the ‚ÄúRock Band‚Äù project on my first club. The sound of 15 computers blaring out sound effects can be tricky to manage, especially when the children find the music! Ask them to keep the noise down. If you‚Äôre lucky they will. You may allow the use of headphones too.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Projects using sound can make for a noisy classroom!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-more-graphics&quot;&gt;Adding more graphics&lt;/h3&gt;

&lt;p&gt;Scratch provide the children with great graphics and sound effects but they want to make each project their own. For my initial Rock Band lesson, I also showed them a &lt;a href=&quot;https://scratch.mit.edu/projects/153704607/&quot;&gt;Pikachu version&lt;/a&gt; as I knew seeing a Pokemon would get them engaged. I‚Äôd put the graphics on a USB stick but formatted it on my Mac. My fatal mistake was not formatting it for a FAT32 file system so it didn‚Äôt work and there was some disappointment. The other issue to consider is whether the computers have internet access and whether the school allow access. You‚Äôll find that they want to download graphics to personalise their projects so you‚Äôll need to decide if this is possible. Thankfully, most schools have good safety policies and internet filtering. If the children can use their own graphics, their projects become their own.&lt;/p&gt;

&lt;p&gt;Show the children the costume editor in Scratch and they can start creating their own sprites or variations of the existing ones. They love doing this but be aware that they will spend the whole lesson drawing sprites if they can.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Discuss with your school what their internet policy is for the children. Allow them to get creative with their own graphics.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubber-duck-debugging&quot;&gt;Rubber duck debugging&lt;/h3&gt;

&lt;p&gt;In software engineering we have a method of finding problems in our code known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck debugging&lt;/a&gt;. The idea is that in telling the problem to someone else, such as a rubber duck, you‚Äôll actually understand the problem and will explain the solution yourself. If you‚Äôve never tried it before, please do. It works! The children sometimes couldn‚Äôt work out why their code didn‚Äôt work as expected. Instead of pointing out what was wrong, I‚Äôd ask them to explain what they‚Äôve done. I‚Äôd ask questions about each line of Scratch code. Most of the children would instantly see the problem and could fix it themselves. Computer programming is all about failure. You have to get it wrong to fully understand how to correct it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: If children have problems, ask them questions about their code. Try not to immediately offer solutions. They‚Äôll often work it out themselves.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;schools-cant-afford-the-best-technology&quot;&gt;Schools can‚Äôt afford the best technology&lt;/h3&gt;

&lt;p&gt;I use a MacBook Pro for work. I am a developer who needs high end technology to do my job. Schools are not the same. They have constant budgetary constraints. They need to decide where to spend their hard fought for money. It won‚Äôt be on the best computers. My son‚Äôs school had reasonably usable Windows laptops with the latest version of Scratch on them. We generally had no issue with them. However, I helped out with teaching some programming at my daughter‚Äôs infant school and it is a different story. They had half a room of desktop PCs and around 10 or 12 notebook-style laptops. The desktop PCs were fine but the notebooks had tiny screens and missing keys. The Scratch interface didn‚Äôt fit on the full screen meaning that children had to scroll up and down to add new script blocks. It was much harder for the children couldn‚Äôt to do this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Investigate the equipment the schools have before you start. You‚Äôll have to work with what you‚Äôve got but it helps to understand the problems you may encounter before you start.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;show-and-tell&quot;&gt;Show and tell&lt;/h3&gt;

&lt;p&gt;One of the best ideas I used was to have a ‚Äúshow and tell‚Äù at the end of the lesson. I didn‚Äôt start this until the second week but it finishes off the lesson extremely well. The children like to show their own unique take on the projects. I was often amazed at the direction the children took and it made for interesting learning for me too. Show off their projects on the big screen or projector if you have one. Make sure all of the children watch as it encourages their creativity for next time. Remember though, if you have 15 in the class, it can take quite a while to share each project. I initially gave 10 minutes to do this but ended up needing 15 to 20 minutes in the future weeks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip: Allow at least 15 minutes before the end of the lesson for the children to show their project to the rest of the class. They‚Äôre proud of what they‚Äôve done and it gives them a great sense of achievement in front of their classmates.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;make-it-fun&quot;&gt;Make it fun!&lt;/h3&gt;

&lt;p&gt;Ultimately, you and the children both need to have fun. Some of the children told me ‚Äúit was awesome - I can‚Äôt wait for next week‚Äù. It‚Äôs been a pleasure to teach them all and I hope tht I‚Äôve influenced some of them to eventually follow a path into software development. If you don‚Äôt run a Code Club then why don‚Äôt you try? The Code Club website allows you to search for clubs in the local area where you could help out. Or you could start one yourself. You don‚Äôt have to be a computer expert to start one. The children will help &lt;strong&gt;you&lt;/strong&gt; if you get stuck!&lt;/p&gt;

&lt;h2 id=&quot;the-projects-for-my-club&quot;&gt;The projects for my club&lt;/h2&gt;

&lt;p&gt;If you‚Äôre interested in following a similar structure to my club, here are the projects that we did. I‚Äôve also listed some of the enhancements that I added and have given links to my versions so you can use and alter them.&lt;/p&gt;

&lt;h4 id=&quot;week-1---rockband&quot;&gt;Week 1 - &lt;a href=&quot;https://www.codeclubprojects.org/en-GB/scratch/rock-band/&quot;&gt;Rockband&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This project gives a great basic introduction to Scratch. It shows how to play sounds, change costumes based upon state and about user input. I expanded upon it with my &lt;a href=&quot;https://scratch.mit.edu/projects/153704607/&quot;&gt;Beatbox Pikachu&lt;/a&gt; version.&lt;/p&gt;

&lt;h4 id=&quot;week-2---ghost-catcher&quot;&gt;Week 2 - &lt;a href=&quot;https://www.codeclubprojects.org/en-GB/scratch/ghostbusters/&quot;&gt;Ghost Catcher&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This is a ‚Äúwhack-a-mole‚Äù style gme where you click on ghosts as they appear and disappear to score points. A great introduction to variables which record the score and display a timer. Enhancements could include varying the frequency, size and speed of ghosts and adding a high score. My version shows a complete game with a game over screen. You‚Äôll find my Ghostbusters game &lt;a href=&quot;https://scratch.mit.edu/projects/153704687/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;week-3---chatbot&quot;&gt;Week 3 - &lt;a href=&quot;https://www.codeclubprojects.org/en-GB/scratch/chatbot/&quot;&gt;Chatbot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Ths is probably my favourite project. You add code so that Scratch asks a question and the children use the response within their code. It gives a great introduction to computer logic, for example ‚Äúif‚Ä¶then‚Äù. I started simple but then asked them to create their own ‚Äúartificial intelligence‚Äù. My enhanced version is an AI which responds to simple commands such as ‚Äúhide‚Äù, ‚Äúmoonwalk‚Äù, ‚Äúbasketball‚Äù, ‚Äúdab‚Äù, ‚Äúbottle flip‚Äù and my character responds accordingly. Bottle flipping was one of their favourites and everyone tried to recreate it! üòÑ Here‚Äôs &lt;a href=&quot;https://scratch.mit.edu/projects/153704739/&quot;&gt;my version&lt;/a&gt; on the Scratch website.&lt;/p&gt;

&lt;h4 id=&quot;week-4---clone-wars&quot;&gt;Week 4 - &lt;a href=&quot;https://www.codeclubprojects.org/en-GB/scratch/clone-wars/&quot;&gt;Clone Wars&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This project was particularly enjoyed by the Y5 children in my second group. It‚Äôs a space shoot-em-up with a &lt;a href=&quot;https://www.youtube.com/watch?v=XhYVcwhSWjI&quot;&gt;Galaxians&lt;/a&gt; feel to it. In this you learn about cloning sprites for spawning bullets and enemy AI. This is an interesting project for explaining how I would experiment with variables to create a fun game. Show them how to change the speed of enemies, the time between bullets and what difference it makes to the game. My version adds a shield, lives and a game over screen so it‚Äôs almost a real game. My version is on the Scratch website &lt;a href=&quot;https://scratch.mit.edu/projects/153704809/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;week-5---flappy-parrot&quot;&gt;Week 5 - &lt;a href=&quot;https://www.codeclubprojects.org/en-GB/scratch/flappy-parrot/&quot;&gt;Flappy Parrot&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This final project was the one that the Y6 children were most excited about. Flappy Bird is an iconic mobile game for most of them and it was great to see their ideas - Flappy Taco anyone? It introduces more complex movement to the children in the form of gravity. It also shows the game developer trick of pretenting the bird moves forward by actually moving the pipes backwards. This was quite a mind-blowing trick for some of the children but great to see them understanding it. This is also a good project to show a full set of game states with. Try adding a start and end screen. Mine used the original Flappy Bird graphics and awarded a medal if you beat the high score. You can find my version of Flappy Bird &lt;a href=&quot;https://scratch.mit.edu/projects/153704839/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/lessons-learned-from-running-a-code-club/</link>
        <guid isPermaLink="true">http://localhost:4000/lessons-learned-from-running-a-code-club/</guid>
        
        
        <category>code-club</category>
        
      </item>
    
  </channel>
</rss>
